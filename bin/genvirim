#!/bin/bash


PATH=$PATH:/usr/sbin:/sbin

PWD=$(pwd)
TMP=$(mktemp -d);
TMPGI=$(mktemp -d);
HOSTNAME=$1

PKG_ARR=(
	linux-image-amd64
	initramfs-tools
	grub-pc
	grub-pc-bin
	fakechroot
	libfakeroot
	e2fsprogs
	locales
	openssh-server
	python
)

run () {
	HOME=/root fakechroot fakeroot chroot $debdir "$@"
}

die () {
	echo "$@" 1>&2
	exit 1
}


# check if we have all necessary packages on the host
HOST_DEB_PACKAGES=$(dpkg-query -f '${binary:Package}\n' -W)
for p in \
	symlinks \
	fakeroot \
	fakechroot \
	debootstrap \
	genext2fs \
	dosfstools \
	mtools; \
do
	echo $HOST_DEB_PACKAGES | grep -w $p > /dev/null
	if [ "$?" == "1" ]; then
		die "$p package is missing on the host, please install"
	fi
done

# genimage is currently not in debian, check if it is in the path
command -v genimage > /dev/null 2>&1 || die "genimage not found in path"


pkgs=$(printf ",%s" "${PKG_ARR[@]}")
pkgs=${pkgs:1}

genimage=${GENIMAGE:-genimage}
debootstrap=${DEBOOTSTRAP:-debootstrap}
hostname=${HOSTNAME:-"debootstrap"}
uuid=${UUID:-`dd if=/dev/urandom count=4 bs=1 2>/dev/null | od -A n -t x4 | tr -d ' '`}
mirror=${MIRROR:-http://ftp.de.debian.org/debian}
debdir=${DEBDIR:-$PWD/debootstrap}
vendor=${VENDOR:-Debian}
release=${RELEASE:-testing}
variant=$VARIANT
type=`dpkg-architecture -qDEB_HOST_GNU_TYPE 2>/dev/null`
systype=${type#*-}
arch=${ARCH:-`dpkg-architecture -t$(arch)-$systype -qDEB_HOST_ARCH 2>/dev/null`}

command -v $debootstrap >/dev/null 2>&1 || die 'debootstrap command is missing (sudo apt install debootstrap)'
command -v $genimage    >/dev/null 2>&1 || die 'genimage command is missing (sudo apt install genimage)'
command -v fakeroot     >/dev/null 2>&1 || die 'fakeroot command is missing (sudo apt install fakeroot)'
command -v fakechroot   >/dev/null 2>&1 || die 'fakechroot command is missing (sudo apt install fakechroot)'

if [ -n "$DEBOOTSTRAP_CACHE" ]; then
    mkdir -p "$DEBOOTSTRAP_CACHE"
fi

tarball=`test -d "$DEBOOTSTRAP_CACHE" && cd "$DEBOOTSTRAP_CACHE"; pwd`/$vendor-$release${variant:+-$variant}-$arch.debs.tgz
debootstrap_opts="--arch=$arch ${variant:+--variant=$variant}"

if [ ! -f $tarball ]; then
	FAKECHROOT=true fakeroot $debootstrap \
		--download-only \
		--make-tarball=$tarball \
		--include $pkgs \
		$debootstrap_opts \
		$release \
		$debdir \
		$mirror
fi

ls -l $tarball

if [ ! -d $debdir ]; then
	fakechroot fakeroot $debootstrap \
		--unpack-tarball="$tarball" \
		--include $pkgs \
		$debootstrap_opts \
		$release \
		$debdir \
		$mirror ||
		cat $debdir/debootstrap/debootstrap.log
fi

if [ ! -d $debdir/etc ]; then
	rm -rf $debdir $TMP $TMPGI
	exit
fi

echo "ROOT=PARTUUID=$uuid-01" > $debdir/etc/initramfs-tools/conf.d/root
echo "$hostname" > $debdir/etc/hostname

cat <<EOF > $debdir/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF

mkdir -p $debdir/root/.ssh/

#autogenerate temporary provisioning key for ansible to be removed after ansible run
if [ ! -e $PWD/ansible_deploy_4096 ]; then
	ssh-keygen \
		-t rsa \
		-b 4096 \
		-C "ansible deployment keys" \
		-N "" \
		-f $PWD/ansible_deploy_4096
fi
cat $PWD/ansible_deploy_4096.pub > $debdir/root/.ssh/authorized_keys

#sed -i $debdir/etc/shadow -e 's/root:\*/root:/g'

rm $debdir/etc/timezone $debdir/etc/localtime

cat <<EOF > $debdir/root/preseed.cfg
tzdata tzdata/Areas select Europe
tzdata tzdata/Zones/Europe select Berlin

locales	locales/locales_to_be_generated	multiselect	de_DE.UTF-8 UTF-8
locales	locales/default_environment_locale	select	de_DE.UTF-8 UTF-8
EOF

sed -i $debdir/etc/locale.gen -e 's/^# en_GB.UTF-8 UTF-8/en_GB.UTF-8 UTF-8/'
sed -i $debdir/etc/locale.gen -e 's/^# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'
sed -i $debdir/etc/locale.gen -e 's/^# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/'

sed -i $debdir/etc/default/grub -e 's/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"net.ifnames=0 rw\"/'
sed -i $debdir/etc/default/grub -e 's/GRUB_CMDLINE_LINUX=\"\"/GRUB_CMDLINE_LINUX=\"console=ttyS0,115200 hostname=$hostname\"/'

run debconf-set-selections /root/preseed.cfg
run dpkg-reconfigure -f noninteractive tzdata
run dpkg-reconfigure -f noninteractive locales

rm $debdir/root/preseed.cfg

#systemd-timesyncd is mising its user in current release, create one
run adduser --disabled-password --disabled-login --no-create-home --gecos "" systemd-timesync

run apt clean


# Is not necessary since the first boot starts with custom grub.cfg
# including PARTUUID
#run update-initramfs -u

symlinks -v -r $debdir \
	| grep absolute \
	| cut -d " " -f 2 \
	| while read i; \
		do target=$(readlink -f $i); \
		fixed=${target#$debdir}; \
		ln -snf $fixed $i; \
	done

run grub-mkimage \
	-O i386-pc \
	-o core.img \
	-d /usr/lib/grub/i386-pc/ \
	-p '(hd0,msdos1)/boot/grub' \
	multiboot boot cat cmp configfile echo help linux ls serial terminal ext2 fat msdospart ata part_msdos test loadenv all_video gzio search biosdisk

mv $debdir/core.img $TMPGI
cp $debdir/usr/lib/grub/i386-pc/boot.img $TMPGI

cat <<EOF > $debdir/boot/grub/grub.cfg
serial --unit=0 --speed=115200
terminal_output	serial console
terminal_input	serial console

set default=0
set timeout=0

set menu_color_normal=cyan/blue
set menu_color_highlight=white/blue

CMDLINE="panic=60 net.ifnames=0 rw console=ttyS0,115200 hostname=$hostname"

menuentry "debootstrap" {
	linux (hd0,msdos1)/vmlinuz \$CMDLINE root=PARTUUID=$uuid-01
	initrd (hd0,msdos1)/initrd.img
}
EOF

cat <<EOF > $TMPGI/genimage.cfg
image grub2-boot {
file {
		name = "boot.img"
	}
}

image grub2-core {
	file {
		name = "core.img"
	}
}

image root.ext4 {
	ext4 {}
	size = 1000M
	mountpoint = "/"
}

image $hostname.img {
	hdimage {
		align = 1M
		disk-signature = 0x$uuid
	}

	partition grub2boot {
		size = 512
		in-partition-table = false
		image = "grub2-boot"
	}

	partition grub2core {
		offset = 512
		in-partition-table = false
		image = "grub2-core"
	}

	partition rootfs {
		partition-type = 0x83
		image = "root.ext4"
	}
}
EOF

if [ ! -e $PWD/$hostname.img ]; then
	fakeroot \
		$genimage \
		--config $TMPGI/genimage.cfg \
		--inputpath=$TMPGI \
		--outputpath=$PWD \
		--tmppath=$TMP \
		--rootpath=$debdir;
fi

rm -fr $TMP $TMPGI $PWD/root.ext4
